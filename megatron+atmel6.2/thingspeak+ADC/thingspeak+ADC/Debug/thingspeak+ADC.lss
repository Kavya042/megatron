
thingspeak+ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  000002ac  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003c6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000068d  00000000  00000000  00000456  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000239  00000000  00000000  00000ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000027e  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c4  00000000  00000000  00000f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000202  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000026a  00000000  00000000  00001262  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 30       	cpi	r26, 0x06	; 6
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e0       	ldi	r26, 0x06	; 6
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 30       	cpi	r26, 0x06	; 6
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  8a:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_init>:
	_delay_ms(100);
}

void uart_init()
{
	UCSRA=0;
  92:	1b b8       	out	0x0b, r1	; 11
	UBRRH=0;
  94:	10 bc       	out	0x20, r1	; 32
	UBRRL=8;
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	89 b9       	out	0x09, r24	; 9
	UCSRB=0b00011000;
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0b10000110;
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
  a2:	08 95       	ret

000000a4 <uart_char>:
	//uart_delay(100);
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <uart_char>
	UDR=t;
  a8:	8c b9       	out	0x0c, r24	; 12
  aa:	08 95       	ret

000000ac <uart_string>:
}

 
void uart_string(char a[])
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	ec 01       	movw	r28, r24
	
	int i;
	for(i=0;a[i]!='\0';i++)
  b2:	88 81       	ld	r24, Y
  b4:	88 23       	and	r24, r24
  b6:	31 f0       	breq	.+12     	; 0xc4 <uart_string+0x18>
  b8:	21 96       	adiw	r28, 0x01	; 1
	uart_char(a[i]);
  ba:	0e 94 52 00 	call	0xa4	; 0xa4 <uart_char>
 
void uart_string(char a[])
{
	
	int i;
	for(i=0;a[i]!='\0';i++)
  be:	89 91       	ld	r24, Y+
  c0:	81 11       	cpse	r24, r1
  c2:	fb cf       	rjmp	.-10     	; 0xba <uart_string+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	81 ee       	ldi	r24, 0xE1	; 225
  c8:	94 e0       	ldi	r25, 0x04	; 4
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <uart_string+0x1e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <uart_string+0x28>
  d4:	00 00       	nop
	uart_char(a[i]);
	uart_delay(100);
}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <uart_num>:

 
void uart_num(unsigned char num)
{
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	c8 2f       	mov	r28, r24
    unsigned char H=0,T=0,O=0;
	H=num/100;
  e6:	19 e2       	ldi	r17, 0x29	; 41
  e8:	81 9f       	mul	r24, r17
  ea:	11 2d       	mov	r17, r1
  ec:	11 24       	eor	r1, r1
  ee:	12 95       	swap	r17
  f0:	1f 70       	andi	r17, 0x0F	; 15
	T=(num - (H*100))/10;
  f2:	0c e9       	ldi	r16, 0x9C	; 156
  f4:	01 03       	mulsu	r16, r17
  f6:	90 01       	movw	r18, r0
  f8:	11 24       	eor	r1, r1
  fa:	c9 01       	movw	r24, r18
  fc:	8c 0f       	add	r24, r28
  fe:	91 1d       	adc	r25, r1
 100:	6a e0       	ldi	r22, 0x0A	; 10
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	0e 94 2c 01 	call	0x258	; 0x258 <__divmodhi4>
 108:	d6 2f       	mov	r29, r22
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
 10a:	80 e3       	ldi	r24, 0x30	; 48
 10c:	81 0f       	add	r24, r17
 10e:	0e 94 52 00 	call	0xa4	; 0xa4 <uart_char>
	uart_char(T+48);
 112:	80 e3       	ldi	r24, 0x30	; 48
 114:	8d 0f       	add	r24, r29
 116:	0e 94 52 00 	call	0xa4	; 0xa4 <uart_char>
void uart_num(unsigned char num)
{
    unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
 11a:	c0 5d       	subi	r28, 0xD0	; 208
 11c:	8c 2f       	mov	r24, r28
 11e:	10 9f       	mul	r17, r16
 120:	80 0d       	add	r24, r0
 122:	11 24       	eor	r1, r1
 124:	dd 0f       	add	r29, r29
 126:	9d 2f       	mov	r25, r29
 128:	99 0f       	add	r25, r25
 12a:	99 0f       	add	r25, r25
 12c:	d9 0f       	add	r29, r25
	
	uart_char(H+48);
	uart_char(T+48);
	uart_char(O+48);	
 12e:	8d 1b       	sub	r24, r29
 130:	0e 94 52 00 	call	0xa4	; 0xa4 <uart_char>
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <getdata>:
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
  		
 }
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
 13e:	90 e6       	ldi	r25, 0x60	; 96
 140:	97 b9       	out	0x07, r25	; 7
    ADMUX|=chno;					//select the ADC channel
 142:	97 b1       	in	r25, 0x07	; 7
 144:	89 2b       	or	r24, r25
 146:	87 b9       	out	0x07, r24	; 7
    ADCSRA|=0X40;					//start ADC convertion
 148:	36 9a       	sbi	0x06, 6	; 6
 14a:	8f e9       	ldi	r24, 0x9F	; 159
 14c:	9f e0       	ldi	r25, 0x0F	; 15
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <getdata+0x10>
 152:	00 c0       	rjmp	.+0      	; 0x154 <getdata+0x16>
 154:	00 00       	nop
    _delay_ms(1);					//give some time delay to complit the aDC convertion
	return ADCH;
 156:	85 b1       	in	r24, 0x05	; 5
  }
 158:	08 95       	ret

0000015a <main>:
#include "uart.h"
#include"adc.h"

int main(void)
{
	DDRB=0b11111111;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	87 bb       	out	0x17, r24	; 23
	//DDRD=0xFF;
	PORTB=0b1111111;
 15e:	8f e7       	ldi	r24, 0x7F	; 127
 160:	88 bb       	out	0x18, r24	; 24

	unsigned char digital;
	uart_init();
 162:	0e 94 49 00 	call	0x92	; 0x92 <uart_init>

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
 166:	86 e8       	ldi	r24, 0x86	; 134
 168:	86 b9       	out	0x06, r24	; 6
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	33 ed       	ldi	r19, 0xD3	; 211
 16e:	80 e3       	ldi	r24, 0x30	; 48
 170:	21 50       	subi	r18, 0x01	; 1
 172:	30 40       	sbci	r19, 0x00	; 0
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x16>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x20>
 17a:	00 00       	nop
	adc_init();
	_delay_ms(1000);
	uart_string("AT+CWMODE=3\r\n");
 17c:	80 e6       	ldi	r24, 0x60	; 96
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 56 00 	call	0xac	; 0xac <uart_string>
 184:	9f ef       	ldi	r25, 0xFF	; 255
 186:	2b e7       	ldi	r18, 0x7B	; 123
 188:	32 e9       	ldi	r19, 0x92	; 146
 18a:	91 50       	subi	r25, 0x01	; 1
 18c:	20 40       	sbci	r18, 0x00	; 0
 18e:	30 40       	sbci	r19, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0x30>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x3a>
 194:	00 00       	nop
	_delay_ms(3000);


	uart_string("AT+CWJAP=\"SSID\",\"yourpassword\"\r\n");
 196:	8e e6       	ldi	r24, 0x6E	; 110
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 56 00 	call	0xac	; 0xac <uart_string>
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	93 e2       	ldi	r25, 0x23	; 35
 1a2:	24 ef       	ldi	r18, 0xF4	; 244
 1a4:	81 50       	subi	r24, 0x01	; 1
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	20 40       	sbci	r18, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x4a>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x54>
 1ae:	00 00       	nop
 1b0:	3f ef       	ldi	r19, 0xFF	; 255
 1b2:	83 e2       	ldi	r24, 0x23	; 35
 1b4:	94 ef       	ldi	r25, 0xF4	; 244
 1b6:	31 50       	subi	r19, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x5c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x66>
 1c0:	00 00       	nop
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	33 e2       	ldi	r19, 0x23	; 35
 1c6:	84 ef       	ldi	r24, 0xF4	; 244
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	30 40       	sbci	r19, 0x00	; 0
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0x6e>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x78>
 1d2:	00 00       	nop
	_delay_ms(5000);


	while(1)
	{
		digital=getdata(0);
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 9f 00 	call	0x13e	; 0x13e <getdata>
 1da:	c8 2f       	mov	r28, r24

		uart_string("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 1dc:	8f e8       	ldi	r24, 0x8F	; 143
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 56 00 	call	0xac	; 0xac <uart_string>
 1e4:	9f ef       	ldi	r25, 0xFF	; 255
 1e6:	2b e7       	ldi	r18, 0x7B	; 123
 1e8:	32 e9       	ldi	r19, 0x92	; 146
 1ea:	91 50       	subi	r25, 0x01	; 1
 1ec:	20 40       	sbci	r18, 0x00	; 0
 1ee:	30 40       	sbci	r19, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0x90>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0x9a>
 1f4:	00 00       	nop
		_delay_ms(3000);


		uart_string("AT+CIPSEND=51\r\n");
 1f6:	8b eb       	ldi	r24, 0xBB	; 187
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 56 00 	call	0xac	; 0xac <uart_string>
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	91 ee       	ldi	r25, 0xE1	; 225
 202:	24 e0       	ldi	r18, 0x04	; 4
 204:	81 50       	subi	r24, 0x01	; 1
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	20 40       	sbci	r18, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <main+0xaa>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <main+0xb4>
 20e:	00 00       	nop
		_delay_ms(100);

		uart_string("GET /update?api_key=M6DC0D32QKMT0C3C&field1=");
 210:	8b ec       	ldi	r24, 0xCB	; 203
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 56 00 	call	0xac	; 0xac <uart_string>
		uart_num(digital);
 218:	8c 2f       	mov	r24, r28
 21a:	0e 94 6e 00 	call	0xdc	; 0xdc <uart_num>
		uart_string("\r\n");
 21e:	8c e8       	ldi	r24, 0x8C	; 140
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 56 00 	call	0xac	; 0xac <uart_string>
 226:	3f ef       	ldi	r19, 0xFF	; 255
 228:	81 ee       	ldi	r24, 0xE1	; 225
 22a:	94 e0       	ldi	r25, 0x04	; 4
 22c:	31 50       	subi	r19, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0xd2>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0xdc>
 236:	00 00       	nop
// 			PORTD=0;
// 		}
// 		else
// 		PORTD=0xFF;
		
		uart_string("AT+CIPCLOSE\r\n");
 238:	88 ef       	ldi	r24, 0xF8	; 248
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 56 00 	call	0xac	; 0xac <uart_string>
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	33 e2       	ldi	r19, 0x23	; 35
 244:	84 ef       	ldi	r24, 0xF4	; 244
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	30 40       	sbci	r19, 0x00	; 0
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	d9 f7       	brne	.-10     	; 0x248 <main+0xee>
 252:	00 c0       	rjmp	.+0      	; 0x254 <main+0xfa>
 254:	00 00       	nop
 256:	be cf       	rjmp	.-132    	; 0x1d4 <main+0x7a>

00000258 <__divmodhi4>:
 258:	97 fb       	bst	r25, 7
 25a:	07 2e       	mov	r0, r23
 25c:	16 f4       	brtc	.+4      	; 0x262 <__divmodhi4+0xa>
 25e:	00 94       	com	r0
 260:	07 d0       	rcall	.+14     	; 0x270 <__divmodhi4_neg1>
 262:	77 fd       	sbrc	r23, 7
 264:	09 d0       	rcall	.+18     	; 0x278 <__divmodhi4_neg2>
 266:	0e 94 40 01 	call	0x280	; 0x280 <__udivmodhi4>
 26a:	07 fc       	sbrc	r0, 7
 26c:	05 d0       	rcall	.+10     	; 0x278 <__divmodhi4_neg2>
 26e:	3e f4       	brtc	.+14     	; 0x27e <__divmodhi4_exit>

00000270 <__divmodhi4_neg1>:
 270:	90 95       	com	r25
 272:	81 95       	neg	r24
 274:	9f 4f       	sbci	r25, 0xFF	; 255
 276:	08 95       	ret

00000278 <__divmodhi4_neg2>:
 278:	70 95       	com	r23
 27a:	61 95       	neg	r22
 27c:	7f 4f       	sbci	r23, 0xFF	; 255

0000027e <__divmodhi4_exit>:
 27e:	08 95       	ret

00000280 <__udivmodhi4>:
 280:	aa 1b       	sub	r26, r26
 282:	bb 1b       	sub	r27, r27
 284:	51 e1       	ldi	r21, 0x11	; 17
 286:	07 c0       	rjmp	.+14     	; 0x296 <__udivmodhi4_ep>

00000288 <__udivmodhi4_loop>:
 288:	aa 1f       	adc	r26, r26
 28a:	bb 1f       	adc	r27, r27
 28c:	a6 17       	cp	r26, r22
 28e:	b7 07       	cpc	r27, r23
 290:	10 f0       	brcs	.+4      	; 0x296 <__udivmodhi4_ep>
 292:	a6 1b       	sub	r26, r22
 294:	b7 0b       	sbc	r27, r23

00000296 <__udivmodhi4_ep>:
 296:	88 1f       	adc	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	5a 95       	dec	r21
 29c:	a9 f7       	brne	.-22     	; 0x288 <__udivmodhi4_loop>
 29e:	80 95       	com	r24
 2a0:	90 95       	com	r25
 2a2:	bc 01       	movw	r22, r24
 2a4:	cd 01       	movw	r24, r26
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
