
Relay+ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000060  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000404  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000239  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000211  00000000  00000000  000008cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000c4  00000000  00000000  00000ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001f3  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000026a  00000000  00000000  00000d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000050  00000000  00000000  00001001  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <uart_init>:
	_delay_ms(100);
}

void uart_init()
{
	UCSRA=0;
  7c:	1b b8       	out	0x0b, r1	; 11
	UBRRH=0;
  7e:	10 bc       	out	0x20, r1	; 32
	UBRRL=8;
  80:	88 e0       	ldi	r24, 0x08	; 8
  82:	89 b9       	out	0x09, r24	; 9
	UCSRB=0b00011000;
  84:	88 e1       	ldi	r24, 0x18	; 24
  86:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0b10000110;
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
  8c:	08 95       	ret

0000008e <uart_char>:
	//uart_delay(100);
}

void uart_char(unsigned char t)
{
	while((UCSRA & 0b00100000)==0);
  8e:	5d 9b       	sbis	0x0b, 5	; 11
  90:	fe cf       	rjmp	.-4      	; 0x8e <uart_char>
	UDR=t;
  92:	8c b9       	out	0x0c, r24	; 12
  94:	08 95       	ret

00000096 <uart_num>:
	uart_delay(100);
}

 
void uart_num(unsigned char num)
{
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	c8 2f       	mov	r28, r24
    unsigned char H=0,T=0,O=0;
	H=num/100;
  a0:	19 e2       	ldi	r17, 0x29	; 41
  a2:	81 9f       	mul	r24, r17
  a4:	11 2d       	mov	r17, r1
  a6:	11 24       	eor	r1, r1
  a8:	12 95       	swap	r17
  aa:	1f 70       	andi	r17, 0x0F	; 15
	T=(num - (H*100))/10;
  ac:	0c e9       	ldi	r16, 0x9C	; 156
  ae:	01 03       	mulsu	r16, r17
  b0:	90 01       	movw	r18, r0
  b2:	11 24       	eor	r1, r1
  b4:	c9 01       	movw	r24, r18
  b6:	8c 0f       	add	r24, r28
  b8:	91 1d       	adc	r25, r1
  ba:	6a e0       	ldi	r22, 0x0A	; 10
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	0e 94 ac 00 	call	0x158	; 0x158 <__divmodhi4>
  c2:	d6 2f       	mov	r29, r22
	O=(num - (H*100) - (T*10));
	
	uart_char(H+48);
  c4:	80 e3       	ldi	r24, 0x30	; 48
  c6:	81 0f       	add	r24, r17
  c8:	0e 94 47 00 	call	0x8e	; 0x8e <uart_char>
	uart_char(T+48);
  cc:	80 e3       	ldi	r24, 0x30	; 48
  ce:	8d 0f       	add	r24, r29
  d0:	0e 94 47 00 	call	0x8e	; 0x8e <uart_char>
void uart_num(unsigned char num)
{
    unsigned char H=0,T=0,O=0;
	H=num/100;
	T=(num - (H*100))/10;
	O=(num - (H*100) - (T*10));
  d4:	c0 5d       	subi	r28, 0xD0	; 208
  d6:	8c 2f       	mov	r24, r28
  d8:	10 9f       	mul	r17, r16
  da:	80 0d       	add	r24, r0
  dc:	11 24       	eor	r1, r1
  de:	dd 0f       	add	r29, r29
  e0:	9d 2f       	mov	r25, r29
  e2:	99 0f       	add	r25, r25
  e4:	99 0f       	add	r25, r25
  e6:	d9 0f       	add	r29, r25
	
	uart_char(H+48);
	uart_char(T+48);
	uart_char(O+48);	
  e8:	8d 1b       	sub	r24, r29
  ea:	0e 94 47 00 	call	0x8e	; 0x8e <uart_char>
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	1f 91       	pop	r17
  f4:	0f 91       	pop	r16
  f6:	08 95       	ret

000000f8 <getdata>:
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
  		
 }
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
  f8:	90 e6       	ldi	r25, 0x60	; 96
  fa:	97 b9       	out	0x07, r25	; 7
    ADMUX|=chno;					//select the ADC channel
  fc:	97 b1       	in	r25, 0x07	; 7
  fe:	89 2b       	or	r24, r25
 100:	87 b9       	out	0x07, r24	; 7
    ADCSRA|=0X40;					//start ADC convertion
 102:	36 9a       	sbi	0x06, 6	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	8f e9       	ldi	r24, 0x9F	; 159
 106:	9f e0       	ldi	r25, 0x0F	; 15
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <getdata+0x10>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <getdata+0x16>
 10e:	00 00       	nop
    _delay_ms(1);					//give some time delay to complit the aDC convertion
	return ADCH;
 110:	85 b1       	in	r24, 0x05	; 5
  }
 112:	08 95       	ret

00000114 <main>:

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
 114:	86 e8       	ldi	r24, 0x86	; 134
 116:	86 b9       	out	0x06, r24	; 6

int main(void)
{
	unsigned char digital;
	adc_init();					//initializatioon of ADC
	uart_init();
 118:	0e 94 3e 00 	call	0x7c	; 0x7c <uart_init>
	DDRD=0xFF;
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	81 bb       	out	0x11, r24	; 17
	DDRB=0b00001100;
 120:	8c e0       	ldi	r24, 0x0C	; 12
 122:	87 bb       	out	0x17, r24	; 23
	PORTB=0b00001100;
 124:	88 bb       	out	0x18, r24	; 24
		{
			PORTD=0;
		} 
		else
		{
			PORTD=0xFF;
 126:	df ef       	ldi	r29, 0xFF	; 255
	DDRD=0xFF;
	DDRB=0b00001100;
	PORTB=0b00001100;
	while(1)
	{
		digital=getdata(0);		//reading the channel 0 of ADC PORTC 0 and store in variable digital
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 7c 00 	call	0xf8	; 0xf8 <getdata>
 12e:	c8 2f       	mov	r28, r24
		//carriage return
		uart_num(digital);
 130:	0e 94 4b 00 	call	0x96	; 0x96 <uart_num>
		if (digital >= 180)
 134:	c4 3b       	cpi	r28, 0xB4	; 180
 136:	10 f0       	brcs	.+4      	; 0x13c <main+0x28>
		{
			PORTD=0;
 138:	12 ba       	out	0x12, r1	; 18
 13a:	01 c0       	rjmp	.+2      	; 0x13e <main+0x2a>
		} 
		else
		{
			PORTD=0xFF;
 13c:	d2 bb       	out	0x12, r29	; 18
		}
		uart_char('\n');			//print the content of variable digital
 13e:	8a e0       	ldi	r24, 0x0A	; 10
 140:	0e 94 47 00 	call	0x8e	; 0x8e <uart_char>
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	81 ee       	ldi	r24, 0xE1	; 225
 148:	94 e0       	ldi	r25, 0x04	; 4
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x36>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x40>
 154:	00 00       	nop
 156:	e8 cf       	rjmp	.-48     	; 0x128 <main+0x14>

00000158 <__divmodhi4>:
 158:	97 fb       	bst	r25, 7
 15a:	07 2e       	mov	r0, r23
 15c:	16 f4       	brtc	.+4      	; 0x162 <__divmodhi4+0xa>
 15e:	00 94       	com	r0
 160:	07 d0       	rcall	.+14     	; 0x170 <__divmodhi4_neg1>
 162:	77 fd       	sbrc	r23, 7
 164:	09 d0       	rcall	.+18     	; 0x178 <__divmodhi4_neg2>
 166:	0e 94 c0 00 	call	0x180	; 0x180 <__udivmodhi4>
 16a:	07 fc       	sbrc	r0, 7
 16c:	05 d0       	rcall	.+10     	; 0x178 <__divmodhi4_neg2>
 16e:	3e f4       	brtc	.+14     	; 0x17e <__divmodhi4_exit>

00000170 <__divmodhi4_neg1>:
 170:	90 95       	com	r25
 172:	81 95       	neg	r24
 174:	9f 4f       	sbci	r25, 0xFF	; 255
 176:	08 95       	ret

00000178 <__divmodhi4_neg2>:
 178:	70 95       	com	r23
 17a:	61 95       	neg	r22
 17c:	7f 4f       	sbci	r23, 0xFF	; 255

0000017e <__divmodhi4_exit>:
 17e:	08 95       	ret

00000180 <__udivmodhi4>:
 180:	aa 1b       	sub	r26, r26
 182:	bb 1b       	sub	r27, r27
 184:	51 e1       	ldi	r21, 0x11	; 17
 186:	07 c0       	rjmp	.+14     	; 0x196 <__udivmodhi4_ep>

00000188 <__udivmodhi4_loop>:
 188:	aa 1f       	adc	r26, r26
 18a:	bb 1f       	adc	r27, r27
 18c:	a6 17       	cp	r26, r22
 18e:	b7 07       	cpc	r27, r23
 190:	10 f0       	brcs	.+4      	; 0x196 <__udivmodhi4_ep>
 192:	a6 1b       	sub	r26, r22
 194:	b7 0b       	sbc	r27, r23

00000196 <__udivmodhi4_ep>:
 196:	88 1f       	adc	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	5a 95       	dec	r21
 19c:	a9 f7       	brne	.-22     	; 0x188 <__udivmodhi4_loop>
 19e:	80 95       	com	r24
 1a0:	90 95       	com	r25
 1a2:	bc 01       	movw	r22, r24
 1a4:	cd 01       	movw	r24, r26
 1a6:	08 95       	ret

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
